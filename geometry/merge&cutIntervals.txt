#include<bits/stdc++.h>
#define all(x) x.begin(),x.end()
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define LL long long
#define LD long double
#define pb push_back
#define F first
#define S second
const double PI=3.1415926535897932384626433;
const int KL=1e6+10;
using namespace std;


const LL MOD=998244353;
int mul(int x,int y){return x*1LL*y%MOD;}
int add(int x,int y){x+=y; if(x>=MOD)x-=MOD; return x;}
int sub(int x,int y){x-=y; if(x<0)x+=MOD; return x;}
int poow(int u,int v){
    if(v==0)return 1;
    int ret=poow(u,v/2);
    ret=mul(ret,ret);
    if(v%2==1)ret=mul(ret,u);
    return ret;
}
int fact[KL+10],invi[KL+10],inv[KL+10];
void init(){
    fact[0]=invi[0]=invi[1]=inv[0]=1;
    for(int i=1;i<KL;i++)fact[i]=mul(fact[i-1],i);
    for(int i=2;i<KL;i++)invi[i]=mul(invi[MOD%i],MOD-MOD/i);
    for(int i=1;i<KL;i++)inv[i]=mul(inv[i-1],invi[i]);
}
int C(int u,int v){
    if(u<v)return 0;
    return mul(fact[u],mul(inv[v],inv[u-v]));
}

int n,m,q,k,a[KL],x,y,b[KL];
char str[KL];
string t;



// A function that transforms a set of intervals to tree of non-overlapping intervals
// Every two overlapping interval X,Y A,B such that X<=A -> (X,A-1), (A,Y), (Y+1,B)
// Takes list of intervals (L,R) inclusive such that 1 <= L,R <= MX
set <int> End[KL];
void mrg(set <int>& a,set<int>& b){
    // move all elements of a to b
    if((int)a.size()>(int)b.size())swap(a,b);
    for(auto v:a)b.insert(v);
    a.clear();
}
vector <pair<int,int>> prep(vector<pair<int,int>>& vec,int MX){
    for(int i=0;i<=MX;i++)End[i].clear();
    vector <pair<int,int>> ret;
    vector <pair<int,int>> intervals;
    for(auto v:vec)End[v.F].insert(v.S+1);

    for(int i=1;i<=MX;i++){
        if(End[i].empty())continue;
        int r=*End[i].begin();
        End[i].erase(End[i].begin());

        mrg(End[i],End[r]);
        if(intervals.empty()){
            intervals.pb({i,r});
            continue;
        }

        pair<int,int> lst=intervals.back();

        if(lst.S<=i){
            ret.pb({lst.F,lst.S-1});
            intervals.pop_back();
            End[i].insert(r);
            i--;
            continue;
        }

        if(lst.S>r){
            intervals.pb({i,r});
            continue;
        }
        ret.pb({lst.F,i-1});
        intervals.pop_back();
        if(lst.S>i)intervals.pb({i,lst.S});
        if(r>lst.S)End[lst.S].insert(r);


    }
    for(auto v:intervals)ret.pb({v.F,v.S-1});
    return ret;
}




vector <int> adj[KL];
int sz[KL];
int dfs(int node){
    int ret=1;
    int rem=sz[node];
    for(auto v:adj[node]){
        ret=mul(ret,dfs(v));
        rem-=sz[v];
    }
    int ret2=mul(invi[rem/2+1],C(rem,rem/2));
    ret=mul(ret,ret2);
    return ret;
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    init();
    cin>>q;
    while(q--){
        cin>>n>>k;
        vector <pair<int,int>> itr;
        for(int i=1;i<=k;i++){
            int l,r;
            cin>>l>>r;
            itr.pb({l,r});
        }itr.pb({1,n});
        if(n%2==1){
            cout<<0<<"\n";
            continue;
        }
        vector <pair<int,int>> intervals=prep(itr,n);
        for(int i=0;i<=(int)intervals.size();i++)adj[i].clear();
        vector <pair<int,int>> events;
        int cnt=1;
        bool ok=1;
        for(auto v:intervals){
            cout<<v.F<<" "<<v.S<<" "<<cnt<<"\n";
            if(v.F%2==v.S%2)ok=0;
            sz[cnt]=(v.S-v.F+1);
            events.pb({v.F,-cnt});
            events.pb({v.S,cnt});
            cnt++;
        }
        sz[0]=n;
        if(!ok){
            cout<<0<<"\n";
            continue;
        }
        sort(all(events));
        vector<int> open;
        open.pb(0);

        for(auto v:events){
            if(v.S<0){
                cout<<open.back()<<" "<<-v.S<<"\n";
                adj[open.back()].pb(-v.S);
                open.pb(-v.S);
            }
            else{
                open.pop_back();
            }
        }
        int ret=dfs(0);

        cout<<ret<<"\n";


    }

    return 0;
}

#include<bits/stdc++.h>

#define all(x) x.begin(),x.end()
#define LL long long
#define LD long double
#define pb push_back
#define F first
#define S second

const double PI=3.1415926535897932384626433;
const int KL=1e6;
const LL MOD=1e9+7;

using namespace std;

///2D geometry
struct point{
    LL x,y;

    // I/O
    point(){x=0,y=0;}
    point(LL xx,LL yy){x=xx,y=yy;}
    void go(LL x1,LL y1){x=x1;y=y1;}
    void read(){cin>>x>>y;}
    void print(){printf("%lld %lld\n",x,y);}

    // operators
    point operator -(point &b){return point{x-b.x,y-b.y};}
    point operator +(point &b){return point{x+b.x,y+b.y};}
    bool operator ==(point &b){return x==b.x && y==b.y;}


    // methods

    LL SQdis(){return x*x+y*y;}
    LD dis(){return (LD)sqrt((LD)(x*x+y*y));}
    LD angle(point origin){
        point nw= *this - origin;
        LD ret=acos((LD)fabs(nw.x)/nw.dis());
        if(nw.x<0 && nw.y<0)ret+=PI;
        else if(nw.x<0 && nw.y>=0)ret=PI-ret;
        else if(nw.x>=0 && nw.y<0)ret=2*PI-ret;
        return ret;
    }

    LL crp(point a){return x*a.y-y*a.x;}
    bool OnSegment(point a,point b){
        a=a-*this;
        b=b-*this;
        if(a.crp(b)!=0)return 0;
        return min(a.x,b.x)<=0 && max(a.x,b.x)>=0 && min(a.y,b.y)<=0 && max(a.y,b.y)>=0;
    }
    int InsideTriangle(point a,point b,point c){ // 0(outside), 2(On boarders), 1(strictly inside), may lead to overflow of the values are big
        if(this->OnSegment(a,b) || this->OnSegment(b,c) || this->OnSegment(a,c))return 2;
        a=a-*this;
        b=b-*this;
        c=c-*this;
        LL Area1=abs(a.crp(b))+abs(a.crp(c))+abs(b.crp(c));
        b=b-a;
        c=c-a;
        LL Area2=abs(b.crp(c));
        if(Area1==Area2)return 1;
        else return 0;
    }
    int InsideConvexPolygon(vector <point>& seg,point origin){// 0(outside), 2(On boarders), 1(strictly inside), points must be ordered counter_clockwise
        point cur=*this-origin;
        if(cur.OnSegment(seg[0],point(0,0)))return 2; // On the lowest Segment
        if(cur.OnSegment(seg.back(),point(0,0)))return 2; // On the highest Segment
        if(seg[0].crp(cur)<0 || (seg.back()).crp(cur)>0)return 0;
        int lo=0,hi=(int)seg.size()-2;
        while(lo<hi){
            int mid=(lo+hi+1)/2;
            if(seg[mid].crp(cur)>=0)lo=mid;
            else hi=mid-1;
        }
        if(!cur.InsideTriangle(point(0,0),seg[lo],seg[lo+1]))return 0;
        if(cur.OnSegment(seg[lo],seg[lo+1]))return 2;
        else return 1;
    }


};

void reorder_polygon(vector<point>& p){
    int pos=0;
    for(int i=1;i<(int)p.size();i++){
        if(p[i].y<p[pos].y || (p[i].y==p[pos].y && p[i].x<p[pos].x))pos=i;
    }
    rotate(p.begin(),p.begin()+pos,p.end());
}
void minkowski(vector<point>& v1,vector <point>& v2, vector<point>& ret){
    reorder_polygon(v1);
    reorder_polygon(v2);
    v1.pb(v1[0]);v1.pb(v1[1]);
    v2.pb(v2[0]);v2.pb(v2[1]);
    int i=0,j=0;
    while(ret.size()<(int)v1.size()+(int)v2.size()-4){
        ret.pb(v1[i]+v2[j]);
        LL cross_prod=(v1[i+1]-v1[i]).crp(v2[j+1]-v2[j]);
        if(cross_prod>=0)i++;
        if(cross_prod<=0)j++;
        i%=((int)v1.size()-2);
        j%=((int)v2.size()-2);
    }
}


LL n;
vector <point> seg[2*KL];
point pz{0,0};
void build(vector<point>& p, int cur=1,int st=0,int en=n-1){
    if(st==en){
        seg[cur].pb(p[st]);
        seg[cur].pb(pz);
        return ;
    }
    int mid=(st+en)/2;
    build(p,2*cur,st,mid);
    build(p,2*cur+1,mid+1,en);
    minkowski(seg[2*cur],seg[2*cur+1],seg[cur]);
    seg[2*cur].clear();
    seg[2*cur].shrink_to_fit();
    seg[2*cur+1].clear();
    seg[2*cur+1].shrink_to_fit();
}

int main()
{


    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    /*
    cin>>n;
    for(int i=1;i<=n;i++){
        point pp; pp.read();
        p.pb(pp);
    }


    int id=0;
    for(int i=1;i<n;i++){
        if(p[i].x<p[id].x || (p[i].x==p[id].x && p[i].y<p[id].y))id=i;
    }
    vector <point> seg;
    for(int i=id+1;i<n;i++)seg.pb(p[i]-p[id]);
    for(int i=0;i<id;i++)seg.pb(p[i]-p[id]);
    point origin=p[id];

    cin>>q;
    while(q--){
        point pp;
        pp.read();
        int ret=pp.InsideConvexPolygon(seg,origin);
        if(ret==1){
            cout<<"IN\n";
        }
        else if(ret==2){
            cout<<"ON\n";
        }
        else cout<<"OUT\n";
    }
    */


    // (a-b)^2 + (c-d)^2
    vector <point> p;
    cin>>n;
    for(int i=1;i<=n;i++){
        point pt(0,0);
        LL l,r;
        cin>>l>>r;
        pt.x=l-r;
        cin>>l>>r;
        pt.y=l-r;
        p.pb(pt);
    }
    build(p);
    LD mx=0.0;
    for(auto v:seg[1]){
        LD ret= (LD)1e-13*(LD)v.x*(LD)v.x + (LD)1e-13*(LD)v.y*(LD)v.y;
        mx=max(mx,ret);
    }
    cout<<fixed<<setprecision(13)<<mx*(LD)1e13<<"\n";

    return 0;
}

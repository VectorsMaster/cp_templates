#include<bits/stdc++.h>
#define all(x) x.begin(),x.end()
#define sc(x) scanf("%d",&x)
#define scl(x) scanf("%lld",&x)
#define LL long long
#define LD double
#define pb push_back
#define F first
#define S second
const double PI=3.1415926535897932384626433;
const int KL=101;
const LL MOD=1e9+7;
using namespace std;

const long double eps = 1e-9, inf = 1e9;

// Basic point/vector struct.
struct Point {

    long double x, y;
    explicit Point(long double x = 0, long double y = 0) : x(x), y(y) {}
    void _read(){
        cin>>x>>y;
    }
    // Addition, substraction, multiply by constant, dot product, cross product.

    friend Point operator + (const Point& p, const Point& q) {
        return Point(p.x + q.x, p.y + q.y);
    }

    friend Point operator - (const Point& p, const Point& q) {
        return Point(p.x - q.x, p.y - q.y);
    }

    friend Point operator * (const Point& p, const long double& k) {
        return Point(p.x * k, p.y * k);
    }

    friend long double dot(const Point& p, const Point& q) {
        return p.x * q.x + p.y * q.y;
    }

    friend long double cross(const Point& p, const Point& q) {
        return p.x * q.y - p.y * q.x;
    }
};

// Basic half-plane struct.
struct Halfplane {

    // 'p' is a passing point of the line and 'pq' is the direction vector of the line.
    Point p, pq;
    long double angle;

    Halfplane() {}
    Halfplane(const Point& a, const Point& b) : p(a), pq(b - a) {
        angle = atan2l(pq.y, pq.x);
    }

    // Check if point 'r' is outside this half-plane.
    // Every half-plane allows the region to the LEFT of its line.
    bool out(const Point& r) {
        return cross(pq, r - p) < -eps;
    }

    // Comparator for sorting.
    bool operator < (const Halfplane& e) const {
        return angle < e.angle;
    }

    // Intersection point of the lines of two half-planes. It is assumed they're never parallel.
    friend Point inter(const Halfplane& s, const Halfplane& t) {
        long double alpha = cross((t.p - s.p), t.pq) / cross(s.pq, t.pq);
        return s.p + (s.pq * alpha);
    }
};
vector<Point> hp_intersect(vector<Halfplane>& H,int dx,int dy) {

    Point box[4] = {  // Bounding box in CCW order
        Point(dx, dy),
        Point(0, dy),
        Point(0, 0),
        Point(dx, 0)
    };

    for(int i = 0; i<4; i++) { // Add bounding box half-planes.
        Halfplane aux(box[i], box[(i+1) % 4]);
        H.push_back(aux);
    }

    // Sort by angle and start algorithm
    sort(H.begin(), H.end());
    deque<Halfplane> dq;
    int len = 0;
    for(int i = 0; i < int(H.size()); i++) {

        // Remove from the back of the deque while last half-plane is redundant
        while (len > 1 && H[i].out(inter(dq[len-1], dq[len-2]))) {
            dq.pop_back();
            --len;
        }

        // Remove from the front of the deque while first half-plane is redundant
        while (len > 1 && H[i].out(inter(dq[0], dq[1]))) {
            dq.pop_front();
            --len;
        }

        // Special case check: Parallel half-planes
        if (len > 0 && fabsl(cross(H[i].pq, dq[len-1].pq)) < eps) {
            // Opposite parallel half-planes that ended up checked against each other.
            if (dot(H[i].pq, dq[len-1].pq) < 0.0)
                return vector<Point>();

            // Same direction half-plane: keep only the leftmost half-plane.
            if (H[i].out(dq[len-1].p)) {
                dq.pop_back();
                --len;
            }
            else continue;
        }

        // Add new half-plane
        dq.push_back(H[i]);
        ++len;
    }

    // Final cleanup: Check half-planes at the front against the back and vice-versa
    while (len > 2 && dq[0].out(inter(dq[len-1], dq[len-2]))) {
        dq.pop_back();
        --len;
    }

    while (len > 2 && dq[len-1].out(inter(dq[0], dq[1]))) {
        dq.pop_front();
        --len;
    }

    // Report empty intersection if necessary
    if (len < 3) return vector<Point>();

    // Reconstruct the convex polygon from the remaining half-planes.
    vector<Point> ret(len);
    for(int i = 0; i+1 < len; i++) {
        ret[i] = inter(dq[i], dq[i+1]);
    }
    ret.back() = inter(dq[len-1], dq[0]);



    return ret;
}

LD crp(Point a,Point b){
    return a.x*b.y-b.x*a.y;
}
LD areaofpolygon(vector<Point> p){
    if(p.size()==0)return 0;
    p.pb(p[0]);
    int sz=p.size()-1;
    LD ret=0;
    for(int i=1;i<=sz;i++)ret+= crp(p[i-1],p[i])/2;
    return abs(ret);
}
Point p[KL];
int a[KL];



int main(){

    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int dx,dy;
    int n;
    cin>>dx>>dy>>n;




    for(int i=1;i<=n;i++){
        p[i]._read();
    }
    for(int i=1;i<=n;i++){
        int x;
        cin>>x;
        a[x]=i;
    }

    vector<Halfplane> H;
    for(int i=n;i>=1;i--){
        for(int j=i-1;j>=1;j--){

            int id1=a[i];
            int id2=a[j];

            if(id1<id2){
                H.pb(Halfplane(p[j],p[i]));
            }
            else H.pb(Halfplane(p[i],p[j]));
            //cout<<i<<" "<<j<<" "<<tr.size()<<" SZ "<<endl;
        }
    }


    vector<Point> vec=hp_intersect(H,dx,dy);

    LD ret=areaofpolygon(vec);

    cout<<fixed<<setprecision(10)<<ret;

    return 0;
}
